import pathlib
import os
import re

## Todo
# Add ncov-random-scripts as a submodule 
# Sanitise 


configfile: "config/config.yaml"

OUTPUT_DIR = pathlib.Path(config["output_dir"])
INPUT_MFASTA = pathlib.Path(config["input"])
FILTER_EXPRESSION = config["filter_expression"]

def aggregate_input(wildcards):
    """
    aggregate the file names of the random number of files
    generated at the scatter step
    """
    checkpoint_output = checkpoints.mfasta_split.get(**wildcards).output[0]
    return expand(OUTPUT_DIR/"vcf/{sequences}.vcf",
           sequences=glob_wildcards(os.path.join(checkpoint_output, "{sequences}.fasta")).sequences)

def find_ref(wildcards):
    """
    Within the output of mfasta_split it finds a file name with the "REF_" prefix that was added by the script
    Will match the pattern "/REF_<anysequence>.fasta"
    """
    checkpoint_output = checkpoints.mfasta_split.get().output[0]
    all_files = expand(OUTPUT_DIR/"individual_seqs/{sequences}.fasta", sequences=glob_wildcards(os.path.join(checkpoint_output, "{sequences}.fasta")).sequences)
    ref = [x for x in all_files if re.search("/REF_.*\.fasta$", x)][0]
    return ref




rule all:
    input:
         OUTPUT_DIR/"masked.fasta"

# Need to add logs/message/conda env
checkpoint mfasta_split:
    input:
        INPUT_MFASTA
    output:
        directory(OUTPUT_DIR/"individual_seqs")
    params:
        OUTPUT_DIR/"individual_seqs"
    script:
        "scripts/split_multifa.py"

rule generate_vcf:
    input:
        referance_dir = find_ref,
        query_dir = OUTPUT_DIR/"individual_seqs/{sequences}.fasta"
    output:
        OUTPUT_DIR/"vcf/{sequences}.vcf"
    shell:
        "python ncov-random-scripts/quick_align.py -g {input.query_dir} -r {input.referance_dir} -o vcf > {output}"

rule merge_vcf:
    input:
        aggregate_input
    output:
        OUTPUT_DIR/"merged.vcf"
    shell:
        "bcftools concat {input} -o {output}"

rule validate_vcf:
    input:
        OUTPUT_DIR/"merged.vcf"
    params:
        FILTER_EXPRESSION
    output:
        OUTPUT_DIR/"valid.vcf"
    shell:
        "bcftools filter -e '{params}' {input} > {output}"

rule sort_vcf:
    input:
        OUTPUT_DIR/"valid.vcf"
    output:
        OUTPUT_DIR/"sorted.vcf"
    shell:
        "bcftools sort {input} > {output}"

rule normalise_vcf:
    input:
        OUTPUT_DIR/"sorted.vcf"
    output:
        OUTPUT_DIR/"norm.vcf"
    shell:
        "bcftools norm -m +any {input} > {output}"

rule mask_ref:
    input:
        referance_dir = find_ref,
        norm_vcf =  OUTPUT_DIR/"norm.vcf"
    output:
         OUTPUT_DIR/"masked.fasta"
    shell:
        "bedtools maskfasta -fi {input.referance_dir} -bed {input.norm_vcf} -fo {output}"







